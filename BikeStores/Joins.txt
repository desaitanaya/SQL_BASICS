1. write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city.

select s.name, c.cust_name, s.city
from salesman as s , customer as c
where s.city = c.city


2. write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city.

select ord_no, purch_amt, cust_name, city
from orders o 
inner join customer c
on o.customer_id = c.customer_id
where purch_amt between 500 and 2000


3. write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commission.

select c.cust_name, c.city, s.name, s.commission
from customer as c 
inner join salesman as s 
on c.salesman_id = s.salesman_id


4. write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.  

select c.cust_name, c.city, s.name, s.commission
from customer as c 
inner join salesman as s
on s.salesman_id = c.salesman_id
where s.commission > 0.12


5. write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission.  

select c.cust_name, c.city, s.name, s.city, s.commission
from customer as c 
inner join salesman as s
on s.salesman_id = c.salesman_id
where s.commission > 0.12
and c.city<>s.city


6. write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.

select o.ord_no, o.ord_date, o.purch_amt, c.cust_name, c.grade, s.name, s.commission
from orders as o 
inner join customer as c
on o.customer_id = c.customer_id
inner join salesman as s 
on s.salesman_id = c.salesman_id


7. Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned. 

select *
from orders 
natural join customer 
natural join salesman 


8. write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.  

select c.cust_name, c.city, c.grade, s.name, s.city
from customer as c
inner join salesman as s
on c.salesman_id = s.salesman_id
order by c.customer_id 


9. write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id. 

select c.cust_name, c.city, c.grade, s.name, s.city
from customer as c
inner join salesman as s
on c.salesman_id = s.salesman_id
where c.grade < 300
order by c.customer_id 


10. Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not.

select c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
from customer as c
inner join orders as o
on c.customer_id = o.customer_id
order by o.ord_date


11. SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves.

select c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt, s.name, s.commission
from customer as c
left outer join orders as o
on c.customer_id = o.customer_id
inner join salesman as s
on o.salesman_id = s.salesman_id


12. Write a SQL statement to generate a list in ascending order of salespersons who work either for one or more customers or have not yet joined any of the customers.

select c.cust_name, s.name
from salesman as s
left outer join customer as c
on s.salesman_id = c.salesman_id
order by s.name


13. write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount.

select c.cust_name, c.city, c.grade, o.ord_no, o.ord_date , o.purch_amt, s.name
from salesman as s
right outer join customer as c
on s.salesman_id = c.salesman_id
inner join orders as o
on c.salesman_id = o.salesman_id


14. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customer. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.

select c.cust_name,c.city,c.grade, 
s.name, o.ord_no, o.ord_date, o.purch_amt 
from customer as c
right outer join salesman as s 
ON c.salesman_id=s.salesman_id 
left outer join orders o
on c.customer_id=o.customer_id 
where o.purch_amt>=2000 
and c.grade is not null


15. For those customers from the existing list who put one or more orders, or which orders have been placed by the customer who is not on the list, create a report containing the customer name, city, order number, order date, and purchase amount

select c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
from orders as o 
left outer join customer as c
on o.customer_id = c.customer_id


16. Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.

select c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt 
from customer as c 
full outer join orders as o
on c.customer_id = o.customer_id


17. Write a SQL query to combine each row of the salesman table with each row of the customer table.

select * 
from salesman 
cross join customer


18. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that city.

select * 
from salesman as s 
cross join customer
where s.city is not null


19. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade.

select * 
from salesman as s 
cross join customer as c
where s.city is not null
and c.grade is not null


20. Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade.

select * 
from salesman as s 
cross join customer as c
where s.city is not null
and c.grade is not null
and s.city<>c.city


21. From the following tables write a SQL query to select all rows from both participating tables as long as there is a match between pro_com and com_id.

select * from item_mast as i
inner join company_mast as c
on i.pro_com = c.com_id


22. Write a SQL query to display the item name, price, and company name of all the products.

select pro_name, pro_price, com_name
from company_mast as c
inner join item_mast as i
on c.com_id = i.pro_com


23. write a SQL query to calculate the average price of items of each company. Return average value and company name.

select avg(pro_price), com_name
from company_mast as c
inner join item_mast as i
on c.com_id = i.pro_com
group by com_name


24. write a SQL query to calculate and find the average price of items of each company higher than or equal to Rs. 350. Return average value and company name.

select avg(pro_price), com_name
from company_mast as c
inner join item_mast as i
on c.com_id = i.pro_com
group by com_name
having avg(pro_price) >= 350


25. write a SQL query to find the most expensive product of each company. Return pro_name, pro_price and com_name.

select i.pro_name, i.pro_price, c.com_name
from company_mast as c
inner join item_mast as i
on i.pro_com = c.com_id
and pro_price = (select max(i.pro_price)
                from item_mast as i
                where i.pro_com = c.com_id)
